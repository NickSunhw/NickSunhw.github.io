<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nick Sun&#39;s blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-30T09:40:36.983Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Nick Sun</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>About-Me</title>
    <link href="http://yoursite.com/2019/10/28/About-Me/"/>
    <id>http://yoursite.com/2019/10/28/About-Me/</id>
    <published>2019-10-28T04:06:15.000Z</published>
    <updated>2019-10-30T09:40:36.983Z</updated>
    
    <content type="html"><![CDATA[<p>Name:<strong>孙浩文 Haowen Sun</strong></p><p>English Name : <strong>Nick</strong></p><p>Gender : <strong>male</strong></p><p>Birthday : <strong>2002-04-05</strong></p><p>School : <strong>Hangzhou Yulan School</strong></p><p>Email:<strong><a href="mailto:sunhaowen2019@163.com" target="_blank" rel="noopener">sunhaowen2019@163.com</a></strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Name:&lt;strong&gt;孙浩文 Haowen Sun&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;English Name : &lt;strong&gt;Nick&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gender : &lt;strong&gt;male&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Birthday : 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Project-Summary</title>
    <link href="http://yoursite.com/2019/10/28/Project-Summary/"/>
    <id>http://yoursite.com/2019/10/28/Project-Summary/</id>
    <published>2019-10-28T04:05:56.000Z</published>
    <updated>2019-10-28T04:22:18.503Z</updated>
    
    <content type="html"><![CDATA[<h3 id="What-is-my-project"><a href="#What-is-my-project" class="headerlink" title="What is my project?"></a>What is my project?</h3><p>Mapping the Energy performance of the building through big data and visualization</p><h3 id="What-are-my-research-target-and-research-method"><a href="#What-are-my-research-target-and-research-method" class="headerlink" title="What are my research target and research method?"></a>What are my research target and research method?</h3><p>Based on Data Science and Visualization, analyze data of two ammeters in CMU Pittsburgh Campus and plotting graphs. After explaining residences’ behaviors in energy consuming, give them suggestions about energy conservation and boost energy efficiency.</p><h3 id="What-was-the-biggest-challenge-that-I-encountered-How-did-I-overcome-it"><a href="#What-was-the-biggest-challenge-that-I-encountered-How-did-I-overcome-it" class="headerlink" title="What was the biggest challenge that I encountered? How did I overcome it?"></a>What was the biggest challenge that I encountered? How did I overcome it?</h3><p>During the learning, my teacher often assigned me some interesting tasks apart from our main project. For example, after my teacher once introduced me the use of standardization, a method used to put all data in the same scale to be analyzed. By applying standardization, we can only compare the trends of data instead of the size, so that we can easily and clearly distinguish different data since we clean out the oversized or undersized data. The after-class task is to find out the word that appears most frequently in the book. The difficulty of this task is that there are a large amount of meaningless characters, like punctuations and space characters. </p><p>Although I understood the concept of the standardization, I still had no idea at the beginning. At first, I didn’t know how to use python to recognize those meaningless characters in a textfile. However, when I searched in the Internet, I found that many programmers writing programs would include UTF8 in the very beginning of the coding. Then, in order to understand what the utf8 means, I initially inquired in the wiki and realized this was a transformation format. Inspired by this, I also wondered if there were other formats used to transform some meaningless characters into a sequence of words. After that, I found the Ascii (American Standard Code for Information Interchange), and there were many representations, like 0 represents Null Character. However, this representation was unsuitable in my coding. Fortunately, after asking my teacher directly, I finally had a way to clean meaningless characters. In the standardization, we can bind two characters together as a group, and divide those two-words groups. In this method, since meaningless character will appear much more times than normal words, so that we can easily filtrate those meaningless words.<br>Although I wasted time during studying knowledge that was not useful in my coding. But since I studied the basic knowledge, I will never mix those various transformation formats in later courses. </p><h3 id="What-are-my-research-result-s-and-conclusion-s"><a href="#What-are-my-research-result-s-and-conclusion-s" class="headerlink" title="What are my research result(s) and conclusion(s)?"></a>What are my research result(s) and conclusion(s)?</h3><h4 id="Data-cleaning"><a href="#Data-cleaning" class="headerlink" title="Data cleaning"></a>Data cleaning</h4><p>Data cleaning is important after inputting the data into the Python. Normally, it is avoidable that some data in the database are incorrect due to the statistic errors. From the graphs before cleaning, it is clear to see some strange points which will interrupt our analysis, hence what we should do is consequently delete those wrong data from raw database.<br><img src="/2019/10/28/Project-Summary/1.png" alt="1"></p><h4 id="Normalization"><a href="#Normalization" class="headerlink" title="Normalization"></a>Normalization</h4><p>It is also an important step before visualization, which makes the data uniform and easy to be analyzed. </p><h4 id="normal-distribution"><a href="#normal-distribution" class="headerlink" title="normal distribution"></a>normal distribution</h4><p>Normal distribution can clearly show the trends of electricity demand in different buildings. For Porter Hall, the electricity consumption is mainly concentrated in 1700KW and 2200KW, and its energy consumption is quite low and uniform. In contrast, the daily demand of Baker Hall is much higher which varies from 4000KW to 5500KW. Hence, we can clearly realize that the total electricity consumption in Baker Hall is much greater.</p><p><img src="/2019/10/28/Project-Summary/2.png" alt="2"></p><h4 id="Cumulative-distribution-function"><a href="#Cumulative-distribution-function" class="headerlink" title="Cumulative distribution function"></a>Cumulative distribution function</h4><p>Cumulative distribution function is similar to normal distribution, but it has other functions in addition to indicate the amount of electricity of these two buildings. Since the vertical axes of CDF is cumulative frequency, if the gradient is slant, it indicates that the frequency is gathering. If the gradient is oppositely horizontal, the frequency is correspondingly zero.</p><p><img src="/2019/10/28/Project-Summary/3.png" alt="3"></p><h4 id="Box-plots"><a href="#Box-plots" class="headerlink" title="Box plots"></a>Box plots</h4><p>Box plots sometimes can tell the story beneath the data. Obviously, as the buildings in campus, the electricity demand in weekends is greatly lower than that in weekdays. Meanwhile, box plots can also show data’s maximum value, 75th percentile, median, 25th percentile and minimum value. From the graphs, the demand in Baker Hall is not only higher than Porter Hall, the range of data is also wider and similar in a complete week. Therefore, we can induce that the need of electricity in Baker Hall is generally higher than Porter Hall, and we should focus on each one specifically.</p><p><img src="/2019/10/28/Project-Summary/4.png" alt="4"></p><h4 id="Clustering"><a href="#Clustering" class="headerlink" title="Clustering"></a>Clustering</h4><p>Clustering can be a clear way to show the similarity and difference between different types of data. From this graph I plotted, the reading pattern of electrical meters in campus is similar: the demand from 0:00 to 7:00 is very low and after that the demand begins to rise and decrease again after 16:00. The only difference between these two meters is that the overall demand in Baker Hall is always higher than that in Porter Hall. The vague lines in clustering graphs also avoid the missing other less frequent data, so that we can analyze more completely and correctly.</p><p><img src="/2019/10/28/Project-Summary/5.png" alt="5"></p><h3 id="What-have-I-learned-in-this-project-Anything-more-I-want-to-add"><a href="#What-have-I-learned-in-this-project-Anything-more-I-want-to-add" class="headerlink" title="What have I learned in this project? Anything more I want to add?"></a>What have I learned in this project? Anything more I want to add?</h3><p>I have mainly learned the strategies and skills to use python and analyze data. Before, I hardly used programming and knew nothing about that. But this time, luckily, I could learn this knowledge following a professional teacher. During the learning courses, my teacher didn’t tell me directly how to write codes, on the other hand, she used a series of data of other sample to teach me. This sample is about the survey indicating people’s happiness, GDP and health in various countries, but the target of our project is analyzing data in electrical meters. These two groups of data are definitely different and the structures of two coding we wrote are also different. Although I just followed my teacher, I could also find the similarity of them: they are inherently the same. Hence, I realized that different kinds of data must have different patterns of graphs and trends, and we need to use proper methods to deal with them. Moreover, the most important thing we should learn is the central essence of writing codes, instead of only remembering them. In the future, I must meet various kinds of data and it is impossible for me to master only one coding pattern. I should try to gather data by myself and plot graphs in my own way.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;What-is-my-project&quot;&gt;&lt;a href=&quot;#What-is-my-project&quot; class=&quot;headerlink&quot; title=&quot;What is my project?&quot;&gt;&lt;/a&gt;What is my project?&lt;/h3&gt;&lt;p&gt;Mapp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Coding-Demonstration</title>
    <link href="http://yoursite.com/2019/10/28/Coding-Demonstration/"/>
    <id>http://yoursite.com/2019/10/28/Coding-Demonstration/</id>
    <published>2019-10-28T04:05:40.000Z</published>
    <updated>2019-10-28T04:09:16.323Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> matplotlib <span class="keyword">import</span> pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line">pd.options.mode.chained_assignment = <span class="literal">None</span> </span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">'data_update(4).csv'</span>, sep=<span class="string">','</span>,header=<span class="string">'infer'</span>,parse_dates=[<span class="number">1</span>], usecols=[<span class="string">"Point name"</span>,<span class="string">"Time"</span>,<span class="string">"Value"</span>])</span><br><span class="line">print(df.head(<span class="number">5</span>))</span><br><span class="line">print(<span class="string">"%50s\t%6s"</span>%(<span class="string">"Point Name"</span>,<span class="string">"Counts"</span>))</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> df[<span class="string">"Point name"</span>].unique():</span><br><span class="line">print(<span class="string">"%50s\t%6d"</span>%(name.strip(),(df[<span class="string">'Point name'</span>]==name).sum()))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#clean the data</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">select_from_df</span><span class="params">(meter_name)</span>:</span></span><br><span class="line">    df_temp = df[df[<span class="string">'Point name'</span>]==meter_name]</span><br><span class="line">    </span><br><span class="line">    plt.figure(figsize=(<span class="number">14</span>,<span class="number">4</span>))</span><br><span class="line">    plt.subplot(<span class="number">121</span>)</span><br><span class="line">    plt.title(<span class="string">"Before Cleaning\n%s"</span>%meter_name)</span><br><span class="line">    plt.xlabel(<span class="string">'index'</span>);plt.ylabel(<span class="string">'power(Watts)'</span>);</span><br><span class="line">    df_temp.Value.plot()</span><br><span class="line">    </span><br><span class="line">    lower = df_temp.Value.quantile(<span class="number">0.001</span>)</span><br><span class="line">    higher = df_temp.Value.quantile(<span class="number">0.999</span>)</span><br><span class="line">    </span><br><span class="line">    index = np.where(df_temp.Value&gt;higher)[<span class="number">0</span>]</span><br><span class="line">    df_temp.iloc[index,<span class="number">2</span>]=np.nan</span><br><span class="line">    index = np.where(df_temp.Value&lt;lower)[<span class="number">0</span>]</span><br><span class="line">    df_temp.iloc[index,<span class="number">2</span>]=np.nan</span><br><span class="line">    </span><br><span class="line">    df_temp.Value=df_temp.Value.interpolate()</span><br><span class="line">    plt.subplot(<span class="number">122</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'index'</span>); plt.ylabel(<span class="string">'power(Watts)'</span>);</span><br><span class="line">    plt.title(<span class="string">"After Cleaning\n%s"</span>%meter_name)</span><br><span class="line">    df_temp.Value.plot()</span><br><span class="line">    plt.show()</span><br><span class="line">    <span class="keyword">return</span> df_temp.copy()</span><br><span class="line"></span><br><span class="line">df_Porter = select_from_df(<span class="string">'Porter Hall Electric (Shark 30) - Watts'</span>)</span><br><span class="line">df_Baker = select_from_df(<span class="string">'Baker Hall Electric (Shark 29) - Demand Watts'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#normalize the data</span></span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">extract_unnormalized_data</span><span class="params">(df_meter)</span>:</span></span><br><span class="line">    <span class="comment">#the first day in the dataset</span></span><br><span class="line">    offset = timedelta(seconds=<span class="number">3600</span>)</span><br><span class="line">    start = df_meter.iloc[<span class="number">0</span>].Time</span><br><span class="line">    start = start.replace(hour=<span class="number">0</span>, minute=<span class="number">0</span>, second=<span class="number">0</span>)</span><br><span class="line">    end = start + offset</span><br><span class="line">    </span><br><span class="line">    daily=[]</span><br><span class="line">    weekinfo=[]</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">True</span>):</span><br><span class="line">        day = []; week = start.weekday()</span><br><span class="line">        <span class="keyword">for</span> h <span class="keyword">in</span> range(<span class="number">24</span>):</span><br><span class="line">            hour_mean = df_meter[(df_meter.Time &lt; end) &amp; (df_meter.Time &gt; start)].Value.mean()</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">not</span> np.isnan(hour_mean)):</span><br><span class="line">                day.append(hour_mean)</span><br><span class="line">            start = end ; end+=offset</span><br><span class="line">            <span class="comment">#only apply days has 24 hours'data</span></span><br><span class="line">        <span class="keyword">if</span>(len(day)==<span class="number">24</span>):</span><br><span class="line">            daily.append(day)</span><br><span class="line">            weekinfo.append(week)</span><br><span class="line">        <span class="keyword">elif</span>(len(day)==<span class="number">0</span>):</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> np.array(daily), np.array(weekinfo)</span><br><span class="line"></span><br><span class="line">daily_Porter, week_Porter = extract_unnormalized_data(df_Porter)</span><br><span class="line">daily_Baker, week_Baker = extract_unnormalized_data(df_Baker)</span><br><span class="line"></span><br><span class="line"><span class="comment">#convert into Kw</span></span><br><span class="line">daily_Porter /= <span class="number">1000</span></span><br><span class="line">daily_Baker /=<span class="number">1000</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">normalize_daily</span><span class="params">(daily)</span>:</span></span><br><span class="line">    N = daily.shape[<span class="number">0</span>]</span><br><span class="line">    sum_daily = daily.sum(axis=<span class="number">1</span>).reshape(N,<span class="number">1</span>)</span><br><span class="line">    norm_daily = daily / sum_daily</span><br><span class="line">    <span class="keyword">return</span> norm_daily, sum_daily</span><br><span class="line"></span><br><span class="line">norm_Porter, sum_Porter = normalize_daily(daily_Porter)</span><br><span class="line">norm_Baker, sum_Baker = normalize_daily(daily_Baker)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#normal distribution</span></span><br><span class="line"><span class="keyword">from</span> scipy <span class="keyword">import</span> stats</span><br><span class="line">plt.rcParams[<span class="string">'figure.figsize'</span>]=(<span class="number">16</span>,<span class="number">4</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gaussian_pdf</span><span class="params">(sum_meter, bw=<span class="number">0.1</span>, name=None)</span>:</span></span><br><span class="line">    kwh_sum = (sum_meter.T)[<span class="number">0</span>]</span><br><span class="line">    kde = stats.gaussian_kde(kwh_sum,bw_method=bw)</span><br><span class="line">    </span><br><span class="line">    plt.hist(kwh_sum, <span class="number">50</span>, normed=<span class="number">1</span>, facecolor=<span class="string">'green'</span>,alpha=<span class="number">0.5</span>)</span><br><span class="line">    </span><br><span class="line">    t_range = np.linspace(kwh_sum.min(),kwh_sum.max(),<span class="number">500</span>)</span><br><span class="line">    delta_t = (kwh_sum.max()-kwh_sum.min())/<span class="number">499</span></span><br><span class="line">    pdf = kde(t_range)</span><br><span class="line">    plt.plot(t_range,pdf,lw=<span class="number">2</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Daily Demand(KW)'</span>); plt.ylabel(<span class="string">'frequency'</span>);</span><br><span class="line">    <span class="keyword">if</span>(name): plt.title(name)</span><br><span class="line">    plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">    <span class="keyword">return</span> pdf, delta_t, t_range</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>); pdf_Porter, d_Porter, t_Porter = gaussian_pdf(sum_Porter, name=<span class="string">'Porter Hall'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>); pdf_Baker, d_Baker, t_Baker = gaussian_pdf(sum_Baker, name=<span class="string">'Baker Hall'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#cumulative distribution function</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ecdf</span><span class="params">(sortedX)</span>:</span></span><br><span class="line">    N = len(sortedX)</span><br><span class="line">    p = np.matlib.repmat(np.arange(N),<span class="number">2</span>,<span class="number">1</span>).T.flatten()</span><br><span class="line">    p[:<span class="number">-1</span>]=p[<span class="number">1</span>:]; p[<span class="number">-1</span>]=N; p=p/N</span><br><span class="line">    x = np.matlib.repmat(sortedX,<span class="number">2</span>,<span class="number">1</span>).T.flatten()</span><br><span class="line">    <span class="keyword">return</span> x, p</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_pdf</span><span class="params">(pdf, sum_demands, delta_t, t_range, name=None)</span>:</span></span><br><span class="line">    cdf = np.cumsum(pdf*delta_t)</span><br><span class="line">    sum_sorted = np.sort(sum_demands.T)[<span class="number">0</span>]</span><br><span class="line">    x, p = ecdf(sum_sorted)</span><br><span class="line">    plt.plot(x, p, label=<span class="string">'empirical CDF'</span>)</span><br><span class="line">    plt.plot(t_range, cdf, label=<span class="string">'Gaussian kde CDF'</span>)</span><br><span class="line">    plt.xlabel(<span class="string">'Demands(kWh)'</span>); plt.ylabel(<span class="string">'CDF'</span>)</span><br><span class="line">    plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">    </span><br><span class="line">plt.subplot(<span class="number">121</span>); plot_pdf(pdf_Porter, sum_Porter, d_Porter, t_Porter, <span class="string">'Porter Hall'</span>)</span><br><span class="line">plt.subplot(<span class="number">122</span>); plot_pdf(pdf_Baker, sum_Baker, d_Baker, t_Baker, <span class="string">'Baker Hall'</span>)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"><span class="comment">#box plots</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">compact_daily</span><span class="params">(week, daily_sum)</span>:</span></span><br><span class="line">    ddf = &#123;<span class="string">"Week"</span>:week, <span class="string">"Daily"</span>:daily_sum.T[<span class="number">0</span>]&#125;</span><br><span class="line">    ddf = pd.DataFrame(ddf)</span><br><span class="line">    <span class="keyword">return</span> ddf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> seaborn <span class="keyword">as</span> sns</span><br><span class="line">week_name = [<span class="string">"Mon"</span>, <span class="string">"Tue"</span>, <span class="string">"Wed"</span>, <span class="string">"Thur"</span>,<span class="string">"Fri"</span>,<span class="string">"Sat"</span>,<span class="string">"Sun"</span>]</span><br><span class="line">ddf_Porter = compact_daily(week_Porter, sum_Porter)</span><br><span class="line">ddf_Baker = compact_daily(week_Baker, sum_Baker)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">121</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">'Week'</span>, y=<span class="string">'Daily'</span>, data=ddf_Porter)</span><br><span class="line">plt.ylabel(<span class="string">'Daily Demands(kW)'</span>)</span><br><span class="line">plt.xticks(range(<span class="number">7</span>), week_name)</span><br><span class="line">plt.subplot(<span class="number">122</span>)</span><br><span class="line">sns.boxplot(x=<span class="string">'Week'</span>, y=<span class="string">'Daily'</span>, data=ddf_Baker)</span><br><span class="line">plt.ylabel(<span class="string">'Daily Demands(kW)'</span>)</span><br><span class="line">plt.xticks(range(<span class="number">7</span>),week_name)</span><br><span class="line">plt.show()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#clustering</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">plot_daily</span><span class="params">(daily, name=None, config=<span class="string">'g-'</span>, label=<span class="string">''</span>, plot_mean=True)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(daily.shape[<span class="number">0</span>]):</span><br><span class="line">        plt.plot(daily[i,:],config,alpha=<span class="number">0.1</span>,lw=<span class="number">0.5</span>)</span><br><span class="line">    <span class="keyword">if</span>(plot_mean): plt.plot(daily.mean(axis=<span class="number">0</span>),config,lw=<span class="number">2</span>,label=label)</span><br><span class="line">    plt.xlabel(<span class="string">'hours'</span>); plt.ylabel(<span class="string">'unnormalized demands(kW)'</span>)</span><br><span class="line">    <span class="keyword">if</span> name: plt.title(name)</span><br><span class="line">plt.figure(figsize=(<span class="number">8</span>,<span class="number">4</span>))</span><br><span class="line">plot_daily(daily_Porter,config=<span class="string">"g-"</span>, label=<span class="string">"Porter Hall"</span>)</span><br><span class="line">plot_daily(daily_Baker,config=<span class="string">"r-"</span>, label=<span class="string">"Baker Hall"</span>)</span><br><span class="line">plt.legend(loc=<span class="string">'best'</span>)</span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span clas
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
